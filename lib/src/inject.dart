part of 'injection.dart';

abstract class Inject {
  static Object? _params;
  static final Map<Type, Injector> _injections = {};
  static final Map<Type, dynamic> _singletons = {};

  /// only for unit test purpose
  static final Map<Type, dynamic> _mocks = {};

  Inject._();

  /// Always returns a new instance of object.
  static T instance<T>([Object? parameter]) {
    if (_mocks.containsKey(T)) {
      return _mocks.remove(T) as T;
    }

    final injector = _injections[T]?.inject ?? _injections[T]?.injectArgs;
    final arguments = parameter ?? _params;

    if (injector == null) {
      throw Exception(T.runtimeType);
    }

    try {
      return injector() as T;
    } catch (e) {
      return injector(arguments) as T;
    }
  }

  /// Returns a singleton of object.
  static T get<T>([Object? parameter]) {
    if (_mocks.containsKey(T)) {
      return _mocks.remove(T) as T;
    }

    if (!_singletons.containsKey(T)) {
      final instance = Inject.instance<T>(parameter);

      _singletons.putIfAbsent(T, () => instance);

      return instance;
    }

    return _singletons[T] as T;
  }

  /// Disposes a singleton generated by [Inject.get]
  static void dispose<T>() => _singletons.remove(T);

  /// Remove all singletons generated by [Inject.get]
  static void reset() => _singletons.clear();

  /// pass mocked instance to [instance]. And [<T>] the original type
  @visibleForTesting
  static void mock<T>(T instance) {
    _mocks.putIfAbsent(T, () => instance);
  }
}
